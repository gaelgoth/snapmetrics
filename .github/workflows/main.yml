name: CI

on:
  push:
    # branches: [main]
    paths:
      - "**.py"
      - "requirements.txt"
      - "setup.py"
      - ".github/workflows/**"
  # pull_request:
  #   # branches: [main]
  #   paths:
  #     - "**.py"
  #     - "requirements.txt"
  #     - "setup.py"
  #     - ".github/workflows/**"
  workflow_dispatch:

jobs:
  pre-commit:
    name: ‚úÖ pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  linter:
    name: üßπ Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install project
        run: make install
      - name: Run linter
        run: make lint

  tests:
    needs: [pre-commit, linter]
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.11, 3.12]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: üêß Linux
          - os: macos-latest
            name: üçé macOS
          - os: windows-latest
            name: ü™ü Windows
    name: ${{ matrix.name }} ‚Ä¢ Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Pip
        if: matrix.os == 'windows-latest'
        run: pip install --user --upgrade pip
      - name: Install project
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            pip install -e .[test]
          else
            make install
          fi
        shell: bash
      - name: Run tests
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            pytest -s -vvvv -l --tb=long tests
          else
            make test
          fi
        shell: bash
      # - name: Upload coverage to Codecov # TODO: Replace by SonarQube
      #   uses: codecov/codecov-action@v4
      #   with:
      #     fail_ci_if_error: true
